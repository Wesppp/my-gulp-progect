
function animateCSS(element, animation, prefix = 'animate__') {
    new Promise((resolve, reject) => {
        const animationName = `${prefix}${animation}`;
    
        element.classList.add(`${prefix}animated`, animationName);
    
        // When the animation ends, we clean the classes and resolve the Promise
        function handleAnimationEnd(event) {
          event.stopPropagation();
          element.classList.remove(`${prefix}animated`, animationName);
          resolve('Animation ended');
        }
    
        element.addEventListener('animationend', handleAnimationEnd);
      });
}
const apikey = '7a76636d057686c8169551ef723fca1e';

const generateBtn = document.getElementById('generate');

generateBtn.addEventListener('click', () => {
    animateCSS(generateBtn, 'bounceIn');
    generatePassword();
})

const pwEl = document.getElementById('pw')
const copyEl = document.getElementById('copy')
const lengthEl = document.getElementById('length')
const lowerEl = document.getElementById('lower')
const numberEl = document.getElementById('number')
const symbolEl = document.getElementById('symbol')
const upperEl = document.getElementById('upper')

const lowerLetters = 'abcdefghijklmnopqrstuvwxyz'
const upperLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
const numbers = '0123456789'
const symbols = '!@#$%^&*()_+='

function getLowercase() {
    return lowerLetters[Math.floor(Math.random() * lowerLetters.length)];
}

function getUppercase() {
    return upperLetters[Math.floor(Math.random() * upperLetters.length)];
}

function getNumber() {
    return numbers[Math.floor(Math.random() * numbers.length)];
}

function getSymbol() {
    return symbols[Math.floor(Math.random() * symbols.length)];
}

function generatePassword() {
    const len = lengthEl.value;
    let password = '';

    for (let i = 0; i < len; i++) {
        const x = generateX();

        if (x) {
            password += x;
        } else {
            warningMessage('pw');
        }
    }

    pwEl.innerHTML = `
    <button id="copy">Copy</button>
    ${password}
    `
}

function generateX() {
    const xs = [];

    if (upperEl.checked) {
        xs.push(getUppercase());
    }

    if (lowerEl.checked) {
        xs.push(getLowercase());
    }

    if (numberEl.checked) {
        xs.push(getNumber());
    }

    if (symbolEl.checked) {
        xs.push(getSymbol());
    }

    return xs[Math.floor(Math.random() * xs.length)]
}

copyEl.addEventListener('click', function() {
    const textarea = document.createElement('textarea')
    const password = pwEl.innerText;

    if (!password) return;

    textarea.value = password;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    textarea.remove();
})
const quizData = [
    {
        question: 'The well - known code from the Matrix actually denotes..',
        a: "director's name",
        b: 'year of release',
        c: 'sushi recipe',
        d: 'nothing',
        correct: 'c'
    },
    {
        question: 'Name the country with the highest life expectancy',
        a: 'China',
        b: 'Russia',
        c: 'Japan',
        d: 'USA',
        correct: 'a'
    },
    {
        question: 'At what age does longevity begin?',
        a: '60',
        b: '90',
        c: '70',
        d: '80',
        correct: 'b'
    },
    {
        question: 'How many kilometers in one mile?',
        a: '1.5 km',
        b: '1.6 km',
        c: '1.4 km',
        d: '1.7 km',
        correct: 'b'
    },
    {
        question: "How long did the Hundred Years' War last?",
        a: '100 years',
        b: '110 years',
        c: '117 years',
        d: '116 years',
        correct: 'd'
    }
]

const quiz = document.getElementById('quiz')
const answerEls = document.querySelectorAll('.answer');
const questionEl = document.getElementById('question')
const a_text = document.getElementById('a_text')
const b_text = document.getElementById('b_text')
const c_text = document.getElementById('c_text')
const d_text = document.getElementById('d_text')
const submitBtn = document.querySelector('.submit')

let currentQuiz = 0;
let score = 0;

loadQuiz()

function loadQuiz() {
    deselectAnswers()
    const currentQuizData = quizData[currentQuiz];
    questionEl.innerHTML = currentQuizData.question;

    a_text.innerHTML = currentQuizData.a;
    b_text.innerHTML = currentQuizData.b;
    c_text.innerHTML = currentQuizData.c;
    d_text.innerHTML = currentQuizData.d;
}

function getSelected() {

    let answer = undefined;

    answerEls.forEach( (answerEl) => {
        if (answerEl.checked) {
            answer = answerEl.id;
        }
    })

    return answer;
}

function deselectAnswers() {
    answerEls.forEach( (answerEl) => {
        answerEl.checked = false;
    })
}

submitBtn.addEventListener('click', () => {
    const answer = getSelected();

    if (answer) {
        if (answer === quizData[currentQuiz].correct) {
            score++;
        }
        currentQuiz++;

        if (currentQuiz < quizData.length) {
            loadQuiz();
        } else {
            quiz.innerHTML = `<h2>
            Your result -> ${score}/${quizData.length}
            </h2>
            <button onclick="location.reload()">Reload</button>`
        }
    }
})
let year = (new Date()).getFullYear();
let birthday = `12 March ${year}`

const daysEl = document.getElementById('days')
const hoursEl = document.getElementById('hours')
const minutesEl = document.getElementById('minutes')
const secondsEl = document.getElementById('seconds')

function countdown() {
    const birthdayDate = new Date(birthday);
    const currentDate = new Date();

    if (birthdayDate - currentDate > 0) {
        const totalSeconds = (birthdayDate - currentDate) / 1000

        const days = Math.floor(totalSeconds / 3600 / 24)
        const hours = Math.floor(totalSeconds / 3600) % 24
        const minutes = Math.floor(totalSeconds / 60) % 60
        const seconds = Math.floor(totalSeconds) % 60
    
        daysEl.innerHTML = days
        hoursEl.innerHTML = hours
        minutesEl.innerHTML = minutes
        secondsEl.innerHTML = seconds
    } else {
        birthday = `10 Jan ${year++}`
    }
}

countdown()

setInterval(countdown , 1000);


const form  = document.getElementById('todos-form')
const input = document.querySelector('.todos-input')
const todos = document.getElementById('todos')

form.addEventListener('submit', (event) => {
    event.preventDefault();

    const todo = input.value;

    if (todo) {
        addToDo(todo);

        updateLS();
    } else {
        warningMessage('todo');
    }
})

function addToDo(todo) {
    const todoEl = document.createElement('li');
    todoEl.innerText = todo;
    todos.appendChild(todoEl);
    todoEl.classList.add("animate__animated", "animate__zoomIn", "todos-el");

    todoEl.addEventListener('click', () => {
        todoEl.classList.toggle('completed');
    })

    todoEl.addEventListener('contextmenu', (e) => {
        e.preventDefault();

        todoEl.remove();
        updateLS();
    })

    input.value = '';
}

function updateLS() {
    const todosEls = document.querySelectorAll('.todos-el');

    const todos = []

    todosEls.forEach( (el) => {
        todos.push({
            text: el.innerText,
        })
    })

    localStorage.setItem('todos', JSON.stringify(todos))
}

function loadingTodos() {
    const savedTodos = JSON.parse(localStorage.getItem('todos'));

    savedTodos.forEach( (td) => {
        addToDo(td['text'])
    })   
}

loadingTodos();

function warningMessage(name) {
    var toastLiveExample = document.querySelector(`.${name}-toast`)

    var toast = new bootstrap.Toast(toastLiveExample)
    toast.show()
}
const weatherForm = document.querySelector('.wether-form');
const search = document.getElementById('search');
const weatherInfo = document.querySelector('.wether-info');

const url = (city) => `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`

async function getWeatherByLocation(city) {
    const response = await fetch(url(city));
    const responseData = await response.json();

    addWeather(responseData);
}


function addWeather(data) {
    const temp = KtoC(data.main.temp);

    const weather = document.createElement('div')
    weather.classList.add('weather')

    weather.innerHTML = `
    <h2>${temp}Â°C</h2>
    <p>
    wind speed - ${data.wind.speed}m/s <br>
    humidity - ${data.main.humidity}% <br>
    pressure - ${data.main.pressure * 0.75}mmHg
    </p>
    <img src="https://openweathermap.org/img/w/${data.weather[0].icon}.png">
    `

    weatherInfo.innerHTML = "";
    weatherInfo.style.opacity = '1';
    animateCSS(weatherInfo, 'flipInY')
    weatherInfo.appendChild(weather);
}

function KtoC(K) {
    return Math.floor(K - 273.15);
}

weatherForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const city = search.value;

    if (city) {
        getWeatherByLocation(city);
    } else {
        warningMessage('weather');
    }
})
//# sourceMappingURL=data:application/json;charset=utf8;base64,
